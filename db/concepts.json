[{"title":"Cascades","created":"20211201100326006","modified":"20211206164704335","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"!! Introduction\n\nCascades are a key mechanism used to construct and customise TiddlyWiki's user interface.\n\n<<.tip \"See [[Customising TiddlyWiki's user interface]] for an overview of all the customisation mechanisms\">>\n\n!! How cascades work\n\nCascades provide a means to select one of multiple values based on flexible, extensible criteria. They can be thought of as a list of conditions that are evaluated in turn until one of them matches.\n\nEach cascade is defined by a special tag which identifies the tiddlers containing the conditions to be matched. The [[Order of Tagged Tiddlers]] determines the order in which the conditions are processed, and provides the means for arranging new rules at specific points in the cascade.\n\nThe conditions are defined by a [[Filter Expression]] in the text field. The filters are evaluated with the list of input titles set to the title of the tiddler to be considered. The `currentTiddler` variable is also set to the title of the tiddler to be considered.\n\nIf the filter returns no result then that result will be ignored and the cascade proceeds to test the next condition. If the filter expression does return at least one result then it serves as the result of the entire cascade.\n\nThe [[Cascade Filter Run Prefix]] provides the implementation of the underlying logic.\n\n!! Example\n\nThe [[Story Tiddler Template Cascade]] contains the logic for determining a tiddler should be displayed as an editable draft or in view mode. By default, it consists of two tiddlers containing the following list of rules:\n\n# `[is[draft]then{$:/config/ui/EditTemplate}]` – if it is a draft tiddler, use the template title given in the tiddler $:/config/ui/EditTemplate\n# `[{$:/config/ui/ViewTemplate}] ` – otherwise, use the template title given in the tiddler $:/config/ui/ViewTemplate\n\n!! Usage in the core\n\nThe TiddlyWiki core uses cascades to choose the following elements:\n\n|[[Story Tiddler Template Cascade]] |The template used to display a particular tiddler in the story river. By default, the edit template is chosen for draft tiddlers, and the view template for others |\n|[[Tiddler Icon Cascade]] |The optional icon associated with a particular tiddler (displayed alongside the title) |\n|[[Tiddler Colour Cascade]] |The optional colour associated with a particular tiddler (used to colour the tiddler icon and if the tiddler is used as a tag also provides the colour for the tag pill) |\n|[[View Template Title Cascade]] |The template used to display the title of a particular tiddler (used by the default view template to display the tiddler title) |\n|[[View Template Body Cascade]] |The template used to display the view mode body of a particular tiddler (used by the default view template to display the tiddler body) |\n|[[Edit Template Body Cascade]] |The template used to display the edit mode body of a particular tiddler (used by the default edit template to display the tiddler body editor) |\n|[[Field Editor Cascade]] |The template used to display the edit mode of a tiddler field (used by the default edit template to display the field editor) |\n\nYou can see the current settings for each cascade in $:/ControlPanel under the ''Info'' -> ''Advanced'' -> ''Cascades'' tab.\n\n!! See Also\n\n<<list-links \"[tag[Cascades]]\">>\n"},{"title":"ColourPalettes","created":"20140216102454178","modified":"20160617101212889","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"A colour palette is a [[data tiddler|DataTiddlers]] that supplies a [[CSS]] colour value, such as ''yellow'' or ''#fe0'', for each of several colour names, like this:\n\n```\npage-background: #fe0\ntable-border: #ccc\n...\n```\n\nSeveral palettes form part of the core. The system tiddler [[$:/palette]] always contains the title of the currently selected palette tiddler. You can change a palette using the <<.icon $:/core/images/palette>> ''palette'' button, found on the \"Tools\" tab in the sidebar.\n\nTo retrieve the value of a named colour from the current palette, e.g. for use in a stylesheet tiddler, use the <<.mlink colour>> macro:\n\n```\n<<colour page-background>>\n```\n\nPalette tiddlers should have the following fields:\n\n|!Name |!Value |\n|title |Typically starting with `$:/` |\n|type |`application/x-tiddler-dictionary` |\n|tags |`$:/tags/Palette` |\n|name |Displayed in the palette browser |\n|description |Displayed in the palette browser |\n|text |`name: value` colour definitions |\n"},{"title":"Commands","created":"20150117174359000","modified":"20180626122309578","tags":"Concepts Reference","type":"text/vnd.tiddlywiki","text":"A <<.def command>> is one of the following words, written with a `--` prefix and used as a command-line option under Node.js, indicating which action is desired. See [[Using TiddlyWiki on Node.js]] for details of how to use them.\n\n<<list-links \"[tag[Commands]]\">>\n"},{"title":"Current Tiddler","created":"20130825144900000","modified":"20150221215022000","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"The <<.def \"current tiddler\">> provides the context in which several aspects of WikiText are interpreted.\n\nFor example, `{{!!title}}` denotes the value of the <<.field title>> field of whatever the current tiddler happens to be. This technique can be used to create general-purpose [[template tiddlers|TemplateTiddlers]].\n\nThe title of the current tiddler can always be found in the <<.vlink currentTiddler>> variable.\n\nThe two most common ways in which the current tiddler is changed are:\n\n* the <<.wlink TiddlerWidget>> widget\n* the <<.wlink ListWidget>> widget (when its <<.attr variable>> attribute is not overridden)\n\nThe current tiddler is therefore often <<.em not>> the same as the [[tiddler that is being viewed or edited|storyTiddler Variable]].\n"},{"title":"DataTiddlers","created":"20130829164700000","modified":"20220427171321793","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"A data tiddler is a miniature database contained within a tiddler.\n\nThere are two standard formats:\n\n* DictionaryTiddlers\n* [[JSONTiddlers]]\n\nOther formats of tiddler can also be parsed to yield blocks of data that behave like data tiddlers.\n\nSee [[JSON in TiddlyWiki]] for an overview.\n"},{"title":"Date Fields","created":"20150117190213631","modified":"20230226144641763","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"Certain [[fields|TiddlerFields]] of a tiddler are used to store dates and times. TiddlyWiki supports dates from the year -9999 to the year 9999.\n\nThe two standard date fields are <<.field created>> and <<.field modified>>.\n\nValues of date fields are 17 or 18-character strings:\n\n* <<.from-version \"5.1.23\">> an optional minus sign `-` to indicate a negative year\n* 4 digits for the year\n* 2 digits for the month\n* 2 digits for the day\n* 2 digits for the hour\n* 2 digits for the minute\n* 2 digits for the second\n* 3 digits for the millisecond\n\nTo avoid problems arising from differences of time zone, TiddlyWiki always uses [[UTC|https://en.wikipedia.org/wiki/Coordinated_Universal_Time]].\n\nThe [[DateFormat]] template for storage of dates in these fields is `[UTC]YYYY0MM0DD0hh0mm0ss0XXX`.\n\nAs an example, the <<.field created>> field of this tiddler has the value <<.value \"\"\"<$view field=\"created\"/>\"\"\">>.\n\nDates can be [[converted to other formats|DateFormat]] for display:\n\n<$macrocall $name=\"wikitext-example-without-html\"\nsrc=\"\"\"<$view field=\"created\" format=\"date\" template=\"DDD DDth MMM YYYY\"/>\"\"\">\n"},{"title":"DefaultTiddlers","created":"20180306113011255","modified":"20180306161225140","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"\"Default tiddlers\" refers to the list of tiddlers that is opened at startup in the browser if the address bar does not include a [[permalink|PermaLinks]]).\n\nAt startup, the text of the system tiddler [[$:/DefaultTiddlers]] is retrieved and evaluated as a [[filter expression|Filter Expression]]. The resulting list of titles is then inserted into the [[story river|Story River]].\n\nThe [[control panel|$:/ControlPanel]] ''info/basics'' tab includes a text box for direct access to [[$:/DefaultTiddlers]].\n\n"},{"title":"DictionaryTiddlers","created":"20141228094500000","modified":"20220427171020974","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"A dictionary tiddler is a kind of [[data tiddler|DataTiddlers]] that contains a simple list of `name: value` pairs.\n\nIts [[ContentType]] is `application/x-tiddler-dictionary`.\n\nThe `text` field consists of one or more lines of the form <code>//name//: //value//</code>.\n\n[[ColourPalettes]], such as the [[default Vanilla palette|$:/palettes/Vanilla]], are dictionary tiddlers.\n"},{"title":"ExternalImages","created":"20140610213500000","modified":"20140912141341933","tags":"Concepts Features","type":"text/vnd.tiddlywiki","text":"External images in TiddlyWiki are tiddlers that point to the URI of an image, rather than embedding the full image data. They can perform better than embedded images, particularly with large numbers or sizes of images. However, using them breaks the single file pattern of TiddlyWiki.\n\nExternal images are used in the browser. They can be created by the Node.js configuration when it builds a TiddlyWiki, or they can be created manually within the browser.\n\n! What is an External Image\n\nAn external image is an ordinary image tiddler that has a ''_canonical_uri'' field containing the URI of the image. The URI can be absolute or relative to the HTML document. If the canonical URI is provided then the ''text'' field of the tiddler is ignored and so should be omitted.\n\n! Manually Creating External Images\n\nTo manually create an external image just create the tiddler with the appropriate image content type, and add a ''_canonical_uri'' field with a URI pointing to the actual image location.\n\n''IMPORTANT:'' Double-check your spelling. ``_canonical_uri`` is spelled [[URI|https://en.wikipedia.org/wiki/URI#The_relationship_between_URIs.2C_URLs.2C_and_URNs]], not URL.\n\n! Creating external images under Node.js\n\nThe following steps are used to create a static HTML file version of a wiki accompanied by an ''images'' folder containing the referenced external images:\n\n# Create image tiddlers in your TiddlyWikiFolders in the usual way\n# Save the images as separate files (by convention, in a subfolder named ''images'')\n# Externalise the image tiddlers by giving them a ''_canonical_uri'' field\n# Save the main HTML file\n\nNote the image files must be saved before they are externalised. Externalising them destroys the ''text'' field within the in-memory copy of the wiki store, meaning that attempts to save them will fail.\n\nFor an example see the ''externalimages'' build target of the demo ''tw5.com'' wiki:\n\n```\n--savetiddlers [is[image]] images\n--setfield [is[image]] _canonical_uri $:/core/templates/canonical-uri-external-image text/plain\n--setfield [is[image]] text \"\" text/plain\n--rendertiddler $:/core/save/all externalimages.html text/plain\n```\n\n!! Saving Separate Image Files\n\nThe following `--savetiddlers` command can be used to save the images of a wiki into an ''images'' subfolder:\n\n```\n--savetiddlers [is[image]] images\n```\n\n!! Externalising Image Tiddlers\n\nTwo `--setfield` commands are used: the first sets the ''_canonical_uri'' field to a URI derived from the title of the tiddler, and the second clears the text field.\n\n```\n--setfield [is[image]] _canonical_uri $:/core/templates/canonical-uri-external-image text/plain\n--setfield [is[image]] text \"\" text/plain\n```\n\nThe template tiddler [[$:/core/templates/canonical-uri-external-image]] contains:\n\n<pre>\n\n<$view tiddler=\"$:/core/templates/canonical-uri-external-image\" field=\"text\" format=\"text\"/>\n\n</pre>\n\nNote that these operations modify the tiddlers in the wiki store and so may affect the operation of subsequent commands.\n\n! Using External Images\n\nYou can't edit an external image directly in the browser except by changing the URI field to point to a different image.\n"},{"title":"Filters","created":"20130827080000000","list":"[[Introduction to filter notation]] [[Filter Syntax]]","modified":"20220316145511797","tags":"Reference Concepts","type":"text/vnd.tiddlywiki","text":"\\define openAdvancedSearch()\n<$action-setfield $tiddler=\"$:/state/tab--1498284803\" text=\"$:/core/ui/AdvancedSearch/Filter\"/>\n<$action-setfield $tiddler=\"$:/temp/advancedsearch/input\" text=\"[tag[Filters]]\"/>\n<$action-setfield $tiddler=\"$:/temp/advancedsearch\" text=\"[tag[Filters]]\"/>\n\\end\n\nYou can think of TiddlyWiki as a database in which the records are tiddlers. A database typically provides a way of discovering which records match a given pattern, and in ~TiddlyWiki this is done with filters.\n\nA <<.def filter>> is a concise notation for selecting a particular [[set of tiddlers|Title Selection]], known as its <<.def \"output\">>. Whenever ~TiddlyWiki encounters a filter, it calculates the output. Further work can then be done with just those tiddlers, such as [[counting|CountWidget]] or [[listing|ListWidget]] them.\n\nThe following example passes a filter to the <<.mlink list-links>> macro to display a list of all tiddlers whose titles are <<.olink2 tagged tag>> with the word <<.word Filters>>:\n\n<<wikitext-example-without-html \"\"\"<<list-links \"[tag[Filters]]\">>\"\"\" >>\n\nA filter output can change as tiddlers are added and deleted in the wiki. ~TiddlyWiki recalculates on the fly, automatically updating any filter-based counts or lists as well.\n\n''Find out more:''\n\n* <$linkcatcher message=\"tm-navigate\" actions=<<openAdvancedSearch>> >[[Advanced Search|$:/AdvancedSearch]]</$linkcatcher> -- has a <<.advancedsearch-tab Filter>> tab that makes it easy to experiment with filters.\n\n* [[Filtered Transclusions|Transclusion in WikiText]] -- If you want to use filter results in your text\n"},{"title":"Hard and Soft Links","created":"20150123220237000","modified":"20150226163104000","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"A <<.def \"hard link\">> is one that can be detected by a superficial examination of WikiText.\n\nA link is <<.def \"soft\">> if it is:\n\n* contained in text [[trancluded|Transclusion]] from elsewhere\n* supplied via a [[macro|Macros]] or [[variable|Variables]]\n* generated by a link widget whose <<.attr to>> attribute is a transclusion, macro or variable\n\n<$macrocall $name=\".warning\" _=\"\"\"Soft links are not detected by link-related filter operators such as <<.olink backlinks>>, <<.olink links>>, <<.olink all>> and <<.olink is>>.\"\"\"/>\n"},{"title":"JSONTiddlers","created":"20141228094500000","modified":"20220427171219408","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"A JSON tiddler is a [[data tiddler|DataTiddlers]] containing a [[JSON|JavaScript Object Notation]] structure in its `text` field. See [[JSON in TiddlyWiki]] for an overview.\n\nIts [[ContentType]] is `application/json`.\n\nThe [[history list|$:/HistoryList]] is an example of a JSON tiddler.\n"},{"title":"Keyboard Shortcut Tiddler","tags":"Concepts","text":"A ''Keyboard Shortcut Tiddler'' is made of three parts:\n\n* The ''Tag'' <<tag-pill $:/tags/KeyboardShortcut>>\n* The ''field'' `key` with a [[Keyboard Shortcut Descriptor]] as its ''value''\n* Actions in its ''text'' field\n\n<<.tip \"\"\"<<.from-version \"5.2.4\">> By default <<.wlink KeyboardWidget>> and text editor shortcuts take priority, which can be circumvented by setting the ''field'' `priority` to `yes`.\"\"\">>\n\nIf the [[Keyboard Shortcut Descriptor]] has the form `((my-shortcut))` it's a ''reference'' to a ''configuration Tiddler'' that stores the corresponding [[Keyboard Shortcut|KeyboardShortcuts]]\n\nIn order to make a ''shortcut'' editable through the <<.controlpanel-tab KeyboardShortcuts>> Tab in the $:/ControlPanel it's sufficient to create a tiddler `$:/config/ShortcutInfo/my-shortcut`, where the ''suffix'' is the ''reference'' used for the [[Keyboard Shortcut|KeyboardShortcuts]]\n\n!! Notes on wiki navigation\n\nIf you want to create keyboard shortcuts for navigation, there are two things to keep in mind:\n\n * If your shortcut uses ''Ctrl'', you need to include `$scroll=\"yes\"` in the [[ActionNavigateWidget's|ActionNavigateWidget]] attributes otherwise the action will be ignored.\n * The actions need to be wrapped in [[NavigatorWidget]] like in this [[New Tiddler keyboard shortcut|$:/core/ui/KeyboardShortcuts/new-tiddler]].\n"},{"title":"Macros","created":"20140211171341271","modified":"20230922094937115","tags":"Concepts Reference","type":"text/vnd.tiddlywiki","text":"!! Important\n\n<<.from-version \"5.3.0\">> Macros have been [[superseded|Macro Pitfalls]] by [[Procedures]], [[Functions]] and [[Custom Widgets]] which together provide more robust and flexible ways to encapsulate and re-use code. \n\nFor text substitutions it is now recommended to use: [[Substituted Attribute Values]], [[substitute Operator]] and [[Transclusion and Substitution]]\n\n!! Introduction\n\nA <<.def macro>> is a named snippet of text. They are typically defined with the [[Pragma: \\define]]:\n\n```\n\\define my-macro(parameter:\"Default value\")\nThis is the macro, and the parameter is $parameter$.\n\\end\n```\n\nThe name wrapped in double angled [[brackets|Brackets]] is used a shorthand way of [[transcluding|Transclusion]] the snippet. Such transclusions are known as <<.def \"macro calls\">>, and each call can supply a different set of parameters:\n\n```\n<<my-macro>>\n<<my-macro \"The parameter\">>\n```\n\nThe parameters that are specified in the macro call are substituted for special placeholders within the snippet:\n\n*  `$parameter-name$` is replaced with the value of the named parameter\n* `$(variable-name)$` is replaced with the value of the named [[variable|Variables]]).\n\n!! How Macros Work\n\nMacros are implemented as a special kind of [[variable|Variables]]. The only thing that distinguishes them from ordinary variables is the way that the parameters are handled.\n\n!! Using Macros\n\n* [[Macro Definitions]] describes how to create macros\n* [[Macro Calls]] describes how to use macros\n* [[Macro Parameter Handling]] describes how macro parameters work\n* [[Macro Pitfalls]] describes some of the pitfalls of using macros\n* [[Core Macros]] lists the built-in core macros\n\n"},{"title":"Messages","created":"20140226083311937","modified":"20211117042057208","tags":"Concepts Reference","type":"text/vnd.tiddlywiki","text":"Widget ''messages'' are generated by  [[Widgets]] in response to user actions.  Messages have a <<.param name>>, an optional primary <<.param parameter>>, and one or more optional named parameters. These messages travel up the widget tree where they are handled by ancestor widgets or the core itself.\n\nThe following widget messages are implemented by the core:\n\n<<list-links \"[tag[Messages]]\">>\n"},{"title":"Modules","created":"20131129162919588","modified":"20160610082237902","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"A //module// in TiddlyWiki5 is a tiddler containing executable JavaScript, of the type `application/javascript` and with the field `module-type` set to the ModuleType of the module.\n\nSee [[control panel|$:/ControlPanel]] <<.icon $:/core/images/options-button>> > ''Info'' > ''Advanced'' > ''Loaded Modules'' for a list of currently loaded modules.\n"},{"title":"PermaLinks","created":"20140502213500000","modified":"20210406131243532","tags":"Features Concepts","type":"text/vnd.tiddlywiki","text":"Permalinks allow direct links to individual tiddlers within a TiddlyWiki.\n\n! Simple Permalinks\n\nThe simplest form of permalink (<<.icon $:/core/images/permalink-button>>) is a single target tiddler title appended to the base URL with `#`:\n\nhttps://tiddlywiki.com/#HelloThere\n\nThe tiddler title can contain spaces if required:\n\n[[https://tiddlywiki.com/#Using TiddlyWiki on Node.js]]\n\nNote that double square brackets are not required around the target tiddler title; however, if present they are silently removed.\n\n! Story Permalinks\n\nThe permalink can also specify the story list of tiddlers that should be opened alongside the target tiddler as a [[TiddlerFilter|Filters]]:\n\n[[https://tiddlywiki.com/#TiddlerFields:Tiddlers TiddlerTags TiddlerFields ContentType]]\n\nIf the target tiddler isn't present in the story list then it is automatically inserted at the top. This means that the following two examples both target the tiddler `Tiddlers` within the story sequence `Tiddlers`, `Tags`, `TiddlerFields`:\n\n[[https://tiddlywiki.com/#Tiddlers:Tags TiddlerFields]]\n\n[[https://tiddlywiki.com/#Tiddlers:Tiddlers Tags TiddlerFields]]\n\nIt is also possible to specify a story filter without specifying a target tiddler for navigation:\n\n<a href=\"https://tiddlywiki.com/#:[tag[task]]\" rel=\"noopener noreferrer\">~https://tiddlywiki.com/#:[tag[task]]</a>\n\n! About URL encoding\n\nThere are technical restrictions on the legal characters in an URL fragment. To allow all tiddler titles to be addressed, illegal characters are subject to a process called \"URL encoding\" whereby problematic characters are replaced by their numeric code. For example, the space character is replaced with `%20`.\n\nBoth the target tiddler title and the story filter should be URL encoded (but not the separating colon). TiddlyWiki generates properly encoded URLs which can look quite ugly. However, in practice browsers will usually perfectly happily process arbitrary characters in URL fragments. Thus when creating permalinks manually you can choose to ignore URL encoding.\n\n! Permalink Behaviour\n\nTwo important aspects of TiddlyWiki's behaviour with permalinks can be controlled via options in the [[control panel|$:/ControlPanel]] <<.icon $:/core/images/options-button>> ''Settings'' tab:\n\n* Whether to automatically update the address bar at each navigation, and if so whether to include the story sequence as well as the target tiddler\n* Whether the updates to the address bar should affect browser history. The default is ''no''; when switched to ''yes'' you can rewind navigation between tiddlers using the browser back and forward buttons\n\nNote that typing or navigating to a permalink will always cause the permalink to be processed, and tiddlers opened and closed as appropriate.\n\n!! Technical Details\n\nWhen TiddlyWiki starts up it processes permalinks according to the following steps; the same steps are repeated if the permalink changes dynamically (this happens in response to the user editing the address bar, for example).\n\n# If the permalink contains a colon, treat the string before as the ''target'' and the string after it as the ''story filter''\n# If the permalink doesn't contain a colon, treat the entire string as the ''target'' and mark the ''story filter'' as //unspecified//\n# If the ''story filter'' was unspecified and we're in the process of starting up, then set the ''story filter'' to the empty string if the ''target'' is specified, or to the default tiddlers if the ''target'' is unspecified\n# If the ''story filter'' was unspecified and we're not starting up, then set the ''story filter'' to the current story list\n# Evaluate the ''story filter'' as the ''story list''\n# If the ''target'' is specified and not present in the ''story list'' then add it at the top\n# If the ''target'' is specified then navigate to it, otherwise navigate to the first tiddler in the ''story list''\n"},{"title":"Plugins","created":"20140910215514237","list":"[[Installing a plugin from the plugin library]] [[Uninstalling a plugin]] [[Manually installing a plugin]] OfficialPlugins","modified":"20220617133819755","tags":"Concepts TableOfContents","type":"text/vnd.tiddlywiki","text":"! Introduction\n\nPlugins in TiddlyWiki5 can be used to distribute optional components that customise and extend wiki. You can install them from the official plugin library or from community sites.\n\nInternally, plugins are a bundle of tiddlers packaged together as a single tiddler that can be installed, copied, disabled or deleted as a unit. The individual tiddlers within a plugin appear as shadow tiddlers. \n\nPlugins can contain ~JavaScript modules, style sheets, and templates. Plugins can also be used to distribute ordinary text, images or any other content.\n\n! Handling Plugins with a Single File Wiki\n\n<<list-links \"[tag[Plugins]] -[has[draft.of]]\">>\n\n! Handling Plugins with a Client - Server Configuration (Node.js)\n\n<<list-links \"[tag[PluginsCS]] -[has[draft.of]]\">>\n\n! Plugin Mechanism\n\nThe PluginMechanism tiddler contains more details about how plugins are implemented internally. \n\nYou can open the plugin details in the <<controlPanel-plugin-link>> on the <<.controlpanel-tab Plugins>> sub-tab.\n\nThere is a plugin called $:/core that contains the main core code of TiddlyWiki. It is always present, and it is the source of default ShadowTiddlers."},{"title":"Railroad Diagrams","created":"20150105133800000","modified":"20211117212441252","tags":"Concepts","text":"<<.def \"Railroad diagrams\">>, sometimes called <<.def \"syntax diagrams\">>, are a visual way of explaining the syntax rules of a computer language. Reading one is like reading a public transport map.\n\nEach diagram starts on the left and ends on the right. Simply follow any line from the startpoint to the endpoint. All the alternative lines are equally valid. A line will sometimes jump over an item that is optional, or loop back to indicate that an item can be repeated.\n\n<$railroad text=\"\"\"\nstart [:optional] {repeated +\",\"} end\n\"\"\"/>\n\nIn the example above, a comma appears between each occurrence of the `repeated` item. The comma path runs from right to left, and can only be reached by first passing through `repeated`.\n\nCharacters in round boxes are literal, i.e. they denote themselves. A name in a rectangular box denotes a further railroad diagram.\n\nThe railroad diagrams in ~TiddlyWiki's documentation are generated with the [[Railroad Plugin]].\n"},{"title":"ShadowTiddlers","tags":"Concepts","text":"\\define actions()\n<$action-setfield $tiddler=\"$:/state/tab/moresidebar-1850697562\" $field=\"text\" $value=\"$:/core/ui/MoreSideBar/Shadows\"/>\n<$action-setfield $tiddler=\"$:/state/tab/sidebar--595412856\" $field=\"text\" $value=\"$:/core/ui/SideBar/More\"/>\n\\end\n\\define click(text)\n<$button actions=<<actions>>>$text$</$button>\n\\end\n\nShadowTiddlers are tiddlers that are loaded from [[Plugins]] at the wiki startup. Unlike ordinary tiddlers, they don't appear in most lists.\n\n!! Overriding Shadow Tiddlers to modify plugins\n\nA ShadowTiddler can be overridden with an ordinary tiddler of the same name. This leaves the shadow tiddler intact but the plugin will use the overriding tiddler in its place, effectively allowing users to modify the behaviour of plugins.\n\nUsers are cautioned against overriding shadow tiddlers because if the shadow tiddler is changed in a plugin update, the overriding tiddler may no longer perform as intended. To remedy this, the overriding tiddler may be modified or deleted. If the overriding tiddler is deleted, then the plugin falls back to using the original shadow tiddler.\n\n!! Overridden Shadow Tiddlers\n\n<<list-links \"[is[tiddler]is[shadow]sort[title]]\">>\n\n!! Shadow Tiddlers\n\nA full list of shadow tiddlers can be found in the sidebar in the \"More\" -> \"Shadows\" tab\n"},{"title":"Story River","created":"20150917193906790","modified":"20150917194028462","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"The \"story river\" (sometimes abbreviated to \"story\") is the sequence of [[tiddlers|Tiddlers]] in the main column of the display."},{"title":"SystemTags","created":"20130822080600000","list":"[[SystemTag: $:/tags/AboveStory]] [[SystemTag: $:/tags/AdvancedSearch]] [[SystemTag: $:/tags/AdvancedSearch/FilterButton]] [[SystemTag: $:/tags/Alert]] [[SystemTag: $:/tags/BelowStory]] [[SystemTag: $:/tags/ControlPanel]] [[SystemTag: $:/tags/ControlPanel/Advanced]] [[SystemTag: $:/tags/ControlPanel/Appearance]] [[SystemTag: $:/tags/ControlPanel/Info]] [[SystemTag: $:/tags/ControlPanel/Saving]] [[SystemTag: $:/tags/ControlPanel/Settings]] [[SystemTag: $:/tags/ControlPanel/Toolbars]] [[SystemTag: $:/tags/EditorTools]] [[SystemTag: $:/tags/EditorToolbar]] [[SystemTag: $:/tags/EditPreview]] [[SystemTag: $:/tags/EditTemplate]] [[SystemTag: $:/tags/EditToolbar]] [[SystemTag: $:/tags/Exporter]] [[SystemTag: $:/tags/Filter]] [[SystemTag: $:/tags/Image]] [[SystemTag: $:/tags/ImportPreview]] [[SystemTag: $:/tags/KeyboardShortcut]] [[SystemTag: $:/tags/Layout]] [[SystemTag: $:/tags/Macro]] [[SystemTag: $:/tags/Macro/View]] [[SystemTag: $:/tags/Macro/View/Body]] [[SystemTag: $:/tags/Manager/ItemMain]] [[SystemTag: $:/tags/Manager/ItemSidebar]] [[SystemTag: $:/tags/MoreSideBar]] [[SystemTag: $:/tags/MoreSideBar/Plugins]] [[SystemTag: $:/tags/PageControls]] [[SystemTag: $:/tags/PageTemplate]] [[SystemTag: $:/tags/Palette]] [[SystemTag: $:/tags/PluginLibrary]] [[SystemTag: $:/tags/RawMarkup]] [[SystemTag: $:/tags/RawMarkupWikified]] [[SystemTag: $:/tags/RawMarkupWikified/BottomBody]] [[SystemTag: $:/tags/RawMarkupWikified/TopBody]] [[SystemTag: $:/tags/RawMarkupWikified/TopHead]] [[SystemTag: $:/tags/RawStaticContent]] [[SystemTag: $:/tags/RemoteAssetInfo]] [[SystemTag: $:/tags/SearchResults]] [[SystemTag: $:/tags/ServerConnection]] [[SystemTag: $:/tags/SideBar]] [[SystemTag: $:/tags/SideBarSegment]] [[SystemTag: $:/tags/StartupAction]] [[SystemTag: $:/tags/StartupAction/Browser]] [[SystemTag: $:/tags/StartupAction/Node]] [[SystemTag: $:/tags/Stylesheet]] [[SystemTag: $:/tags/TagDropdown]] [[SystemTag: $:/tags/TextEditor/Snippet]] [[SystemTag: $:/tags/TiddlerInfo]] [[SystemTag: $:/tags/TiddlerInfo/Advanced]] [[SystemTag: $:/tags/TiddlerInfoSegment]] [[SystemTag: $:/tags/ToolbarButtonStyle]] [[SystemTag: $:/tags/TopLeftBar]] [[SystemTag: $:/tags/TopRightBar]] [[SystemTag: $:/tags/ViewTemplate]] [[SystemTag: $:/tags/ViewToolbar]]","modified":"20210519160636964","tags":"Reference Concepts","type":"text/vnd.tiddlywiki","text":"System tags are used to give special behaviour to tiddlers.\n\nThese are the system tags defined by the ~TiddlyWiki core:\n\n<table>\n<tbody>\n<$list filter=\"[tag[SystemTags]]\">\n<tr>\n<td>\n<$macrocall $name=\"tag\" tag={{!!caption}}/>\n</td>\n<td>\n<$link>\n{{!!description}}\n</$link>\n</td>\n</tr>\n</$list>\n</tbody>\n</table>\n\n!! System tags defined by ~TiddlyWiki plugins\n\n|<<tag \"$:/tags/HelpPanel\">> |can be seen at: [[tiddlywiki prerelease|https://tiddlywiki.com/prerelease/]] see: top left page control bubble|\n|<<tag \"$:/tags/HelpPanel/Videos\">> |help panel \"videos\" tab|\n|<<tag \"$:/tags/MakeQR\">> |can be seen at: [[tiddlywiki prerelease|https://tiddlywiki.com/prerelease/]]. see: Tiddler toolbar |\n|<<tag \"$:/tags/TranslationGroup\">> |used by the [[translators edition|https://tiddlywiki.com/editions/translators/]] |\n|<<tag \"$:/tags/TwitterUsage\">> |twitter plugin |\n|<<tag \"$:/tags/ViewToolbarButton/QRcode\">> |see: [[tiddlywiki prerelease|https://tiddlywiki.com/prerelease/]] |\n|<<tag \"$:/tags/test-spec\">> |tiddlywiki test suite |\n\n"},{"title":"SystemTiddlers","created":"20180113144350185","modified":"20180113153832195","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"Tiddlers are classified as system tiddlers if their title starts with the special string `$:/`. The only difference from ordinary tiddlers is that they are hidden from most searches and lists in the sidebar. (In particular, system tiddlers are shown in the \"More/System\" list).\n\nSystem tiddlers provide a simple way to hide the internal components of TiddlyWiki so that they don't clutter things up, getting in the way of the users content.\n\nMany of the system tiddlers follow the convention of using further slashes to delineate the components of the title. For example: `$:/config/BitmapEditor/LineWidth`.\n\nYou don't need to create your own system tiddlers, but it can be useful when customising TiddlyWiki. For example, if you create a custom palette you might call it `$:/_MyPalette` so that (a) it is hidden from searches/lists and (b) it will appear at the top of the system tiddler list for easy reference.\n\n"},{"title":"Tagging","created":"20140904075400000","modified":"20160612132049797","tags":"[[Working with TiddlyWiki]] Concepts","type":"text/vnd.tiddlywiki","text":"Tagging is a way of organising tiddlers into categories. For example, if you had tiddlers representing various individuals, you could tag them as ''friend'', ''family'', ''colleague'' etc to indicate these people's relationships to you.\n\nA tag is in fact just a tiddler (or a potential tiddler), and it can have tags of its own. You can add any number of tags to the same tiddler.\n\nSee [[Creating and editing tiddlers]] for instructions on how to tag.\n\nBy tagging your tiddlers, you can view, navigate and organise your information in numerous additional ways:\n\n* The coloured tag pills on a tiddler give you quick access to all the other tiddlers with the same tag, as well as to the tiddler that represents the tag itself.\n\n* If a tiddler is serving as a tag, then the ''Tagging'' tab in its InfoPanel will show you which tiddlers are currently tagged with it.\n\n* The ''More'' tab of the sidebar has a ''Tags'' tab that presents an overview of all your tags and lets you access all your tagged tiddlers.\n\n* You can use [[filters|Filters]] to create lists of tiddlers based on their tags. You can then display any combination of the [[fields|TiddlerFields]] of those tiddlers. For example, you could build a glossary by listing the title and text of all tiddlers tagged ''Glossary''. Such lists can be formatted in any way you wish: e.g. bulleted, numbered or comma-separated.\n\n* There are a number of special ''system tags'' that control the layout of tiddlers and the entire ~TiddlyWiki page. See [[Page and tiddler layout customisation]] for instructions.\n\nThere are two more things you can do with tags:\n\n! Set a tag's colour and icon\n\nYou can use the <<.icon $:/core/images/tag-button>> [[tag manager|$:/TagManager]], found on the ''Tags'' tab under ''More'' in the sidebar, to change the colour of a tag's pill or add an icon to the pill.\n\n* To change the colour, click the button in the ''Colour'' column to select from a colour picker. Alternatively, click the icon in the ''Info'' column, then type a [[CSS]] colour value in the ''Colour'' field\n* To change the icon, click the <<.icon $:/core/images/down-arrow>> button in the ''Icon'' column and choose from the list of available icons\n\n! Change the order in which tags are listed\n\nBy default, tagged tiddlers are listed in alphabetical order.\n\nIf you want any other order, add a <<.flink ListField>> field to the tag tiddler, and set its value to be a [[list of the tiddlers|Title List]] in that order.\n\nThe ''list'' field doesn't have to mention all of the tiddlers. See the [[precise rules|Order of Tagged Tiddlers]] ~TiddlyWiki uses to order tagged tiddlers.\n"},{"title":"TemplateTiddlers","created":"20140107114355828","modified":"20150220160920000","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"A template tiddler is not actually a type of tiddler, it is a role in which a tiddler can be used.\n\nTemplates are a way to re-use chunks of WikiText.\n\nTranscluding through a template extends the basic functionality of [[Transclusion]] by combining two tiddlers:\n\n* A template tiddler that contains the WikiText to be displayed. It can contain transclusions that reference fields in the [[current tiddler|Current Tiddler]]\n* A target tiddler that identifies which tiddler is to be treated as current when resolving references to fields\n\nThe best example of templating is the main story river in TiddlyWiki. Each tiddler in the story river is rendered through a ViewTemplate that specifies how each field is to be rendered.\n\nSee [[Transclusion with Templates]] for details.\n"},{"title":"TextReference","created":"20130827075900000","modified":"20161216173541948","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"A TextReference is a general purpose way to describe a fragment of text as either a field of a tiddler, or an index within a [[data tiddler|DataTiddlers]].\n\nIn different situations, text references can be used to retrieve values, or to specify a value that should be modified.\n\nA TextReference consists of several parts:\n\n* The title of the target tiddler. If omitted, it defaults to the [[Current Tiddler]]\n* Either one of:\n** The name of a field (marked with `!!`)\n** The name of an index within a [[data tiddler|DataTiddlers]] (marked with `##`)\n* If both the field and index are omitted, the text field is used as the default\n\nMost of the parts of a text reference can be optional:\n\n* `tiddlerTitle` - the title [[field|TiddlerFields]] of the specified tiddler\n* `tiddlerTitle!!field` - a [[tiddler field|TiddlerFields]] (eg, `modified`, `modifier`, `type` etc)\n* `!!field` - a [[field|TiddlerFields]] of the current tiddler\n* `tiddlerTitle##propertyIndex` - extracts a named property from DataTiddlers\n\nText references can be used in several places:\n\n* As [[indirect parameters|Filter Parameter]] within [[Filters]] (eg, `<$list filter=\"[tag{MyTag!!name}]\"/>`)\n* As [[indirect attributes|HTML in WikiText]] of an element or widget (eg, `<$widget attrib={{Title!!description}}/>`)\n* As the operand of a shortcut transclusion (eg, `{{MyTiddler!!title}}`)\n* As the `state` attribute of the RevealWidget and the LinkCatcherWidget\n\n<$macrocall $name=\".tip\" _=\"\"\"Note the distinction between a text reference such as `foo!!bar` and a transclusion of a text reference such as `{{foo!!bar}}`\"\"\"/>\n\n"},{"title":"TiddlerFields","created":"20130825213300000","modified":"20220109101407050","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"\\define lingo-base() $:/language/Docs/Fields/\n~TiddlerFields are name:value pairs that make up a [[tiddler|Tiddlers]]. Field names must be lowercase letters, digits or the characters `-` (dash), `_` (underscore) and `.` (period).\n\nThe standard fields are:\n\n|!Field Name |!Description |\n|`title` |<<lingo title>> |\n|`text` |<<lingo text>> |\n|`modified` |<<lingo modified>> |\n|`modifier` |<<lingo modifier>> |\n|`created` |<<lingo created>> |\n|`creator` |<<lingo creator>> |\n|`tags` |<<lingo tags>> |\n|`type` |<<lingo type>> |\n|`list` |<<lingo list>> -- see ListField |\n|`caption` |<<lingo caption>> |\n\nOther fields used by the core are:\n\n|!Field Name |!Description |\n|`class` |<<lingo class>> |\n|`code-body` |<<.from-version \"5.2.1\">> <<lingo code-body>> |\n|`color` |<<lingo color>> |\n|`description` |<<lingo description>> |\n|`draft.of` |<<lingo draft.of>> |\n|`draft.title` |<<lingo draft.title>> |\n|`footer` |<<lingo footer>> |\n|`hide-body`|<<lingo hide-body>>|\n|`icon` |<<lingo icon>> |\n|`library` |<<lingo library>> |\n|`list-after` |<<lingo list-after>> |\n|`list-before` |<<lingo list-before>> |\n|`name` |<<lingo name>> |\n|`plugin-priority` |<<lingo plugin-priority>> |\n|`plugin-type` |<<lingo plugin-type>> |\n|`source` |<<lingo source>> |\n|`subtitle` |<<lingo subtitle>> |\n|`throttle.refresh` |<<lingo throttle.refresh>> |\n|`toc-link`|<<lingo toc-link>>|\n|`_canonical_uri`|<<lingo _canonical_uri>>|\n\nThe TiddlyWebAdaptor uses a few more fields:\n\n|!Field Name |!Description |\n|`bag` |<<lingo bag>> |\n|`revision` |<<lingo revision>> |\n|`_is_skinny` |<<lingo _is_skinny>> |\n\nDetails of the fields used in this ~TiddlyWiki are shown in the [[control panel|$:/ControlPanel]] {{$:/core/ui/Buttons/control-panel}} under the <<.controlpanel-tab Info>> tab >> <<.info-tab Advanced>> sub-tab >> Tiddler Fields\n"},{"title":"TiddlerLinks","created":"20130825202900000","modified":"20141231093344090","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"Links are regions of a tiddler that can be clicked to cause navigation to a different tiddler. The navigation behaviour is determined by the current StoryView; the classic TiddlyWiki view displays the story as a linear sequence of tiddlers.\n\nHolding the ''control'' or ''command'' key while clicking on a tiddler link opens the target tiddler but doesn't navigate to it. This can be a useful way of queueing up tiddlers to be read later.\n\nLinks are useful for modelling organic relationships between tiddlers, and particularly for expressing the navigational paths between tiddlers.\n\nThe InfoPanel lists incoming links to a tiddler in the tab ''References''.\n\n[[Filters]] can include the following filter operators that work with links:\n\n* `[links[]]` - returns the titles of the tiddlers that are linked from the currently selected tiddler(s)\n* `[backlinks[]]` - returns the titles of the tiddlers that link to the currently selected tiddler(s)\n\nTiddlyWiki5 alters the appearance of tiddler links to convey additional information about the target of the link:\n\n|!Link description |!Link appearance |\n|To a tiddler that exists |[[LikeThis|TiddlerLinks]] |\n|To a tiddler that doesn't exist |[[LikeThis|ATiddlerThatDoesntExist]] |\n|To a shadow tiddler that has not been overridden |[[LikeThis|$:/core/copyright.txt]] |\n|To a shadow tiddler that has been overridden by an ordinary tiddler |[[LikeThis|$:/SiteTitle]] |\n\nExternal links are shown like this: https://tiddlywiki.com/ or [[like this|https://tiddlywiki.com/]].\n"},{"title":"Tiddlers","created":"20130825213500000","modified":"20141121111732959","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"Tiddlers are the fundamental units of information in TiddlyWiki. Tiddlers work best when they are as small as possible so that they can be reused by weaving them together in different ways.\n\nA \"tiddler\" is an informal British word meaning a small fish, typically a stickleback or a minnow. Other systems have analogous concepts with generic names like \"items\", \"entries\", \"entities\", \"nodes\" or \"records\". TiddlyWiki takes the view that it is better to be confusingly distinctive than confusingly generic.\n\nInternally, tiddlers are a list of uniquely named values called fields. The only field that is required is the `title` field, but useful tiddlers also have a `text` field, and some or all of the standard fields listed in TiddlerFields.\n\nTiddlers are ubiquitous in TiddlyWiki. They are used to store everything from JavaScript code modules to the settings and state associated with the user interface.\n"},{"title":"TiddlyWiki","created":"20130822170700000","modified":"20170127221451610","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"~TiddlyWiki is a rich, interactive tool for manipulating complex data with structure that doesn't easily fit into conventional tools like spreadsheets or wordprocessors.\n\n~TiddlyWiki is designed to fit around your brain, helping you deal with the things that won't fit. The [[fundamental idea|Philosophy of Tiddlers]] is that information is more useful and reusable if we cut it up into the smallest semantically meaningful chunks -- [[tiddlers|Tiddlers]] -- and give them titles so that they can be [[structured|Structuring TiddlyWiki]] with [[links|TiddlerLinks]], [[tags|Tagging]], [[lists|ListField]] and [[macros|Macros]]. Tiddlers use a WikiText notation that concisely represents a wide range of text formatting and hypertext features. ~TiddlyWiki aims to provide a fluid interface for working with tiddlers, allowing them to be aggregated and composed into longer narratives.\n\nPeople love using ~TiddlyWiki. Because it can be used without any complicated server infrastructure, and because it is [[open source|OpenSource]], it has brought unprecedented freedom to everyone to keep their precious information under their own control.\n\n~TiddlyWiki was originally created by JeremyRuston and is now a thriving [[open source|License]] project with a busy [[Community]] of independent developers.\n"},{"title":"TiddlyWiki5","created":"20130825213600000","modified":"20220613145033713","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"~TiddlyWiki5 is a reboot of TiddlyWiki for the next 25 years. It is a complete interactive wiki in JavaScript that can be run in the browser or on the server under [[Node.js]].\n\nThe ~TiddlyWiki repository can be found at GitHub."},{"title":"Title List","created":"20150117152418000","modified":"20231019155036098","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"A <<.def \"title list\">> is a line of text that presents one or more tiddler titles, strung together with a space between each one and the next.\n\nIf a title <<.em contains>> a space, it needs double square brackets around it:\n\n`GettingStarted [[Discover TiddlyWiki]] Upgrading`\n\nTitle lists are used in various places, including PermaLinks and the ListField.\n\nThey are in fact the simplest case of a [[filter|Filters]], and are thus a way of expressing a [[selection of titles|Title Selection]].\n\n<<.warning \"\"\"The [[Title List]] format cannot reliably represent items that contain certain specific character sequences such as `]] `. Thus it should not be used where there is a possibility of such sequences occurring.\"\"\">>\n\nSee also:\n\n* The [[format Operator]] with the 'titlelist' suffix conditionally wraps double square brackets around a string if it contains whitespace\n"},{"title":"Title Selection","created":"20150117152418000","modified":"20150124202920000","tags":"Concepts","text":"A <<.def \"title selection\">> is an ordered set of tiddler titles (or similar strings), in which no title appears more than once.\n\nTitle selections are important in [[filter|Filters]] processing.\n\nThe simplest way to write one down is as a [[title list|Title List]].\n"},{"title":"Transclusion","created":"20141129194651420","modified":"20141130195444237","tags":"Concepts","text":"[[Transclusion|https://en.wikipedia.org/wiki/Transclusion]] is the process of referencing one tiddler \"A\" from another tiddler \"B\" such that the content of \"A\" appears to be a part of \"B\".\n\nCopying and pasting content creates multiple copies of the same content in several different places. With transclusion, there can be a single copy and a special instruction in \"B\" which indicates the point at which content should be inserted from tiddler \"A\".\n\nNote that if the content of \"A\" is modified then the modification automatically appears in \"B\". This makes it easier to maintain repetitive content, by allowing every piece to be written in a single place, but viewed from many.\n\nThe concept of transclusion plays an important role in the [[Philosophy of Tiddlers]] because it is the primary way in which small items of content are combined.\n\nTo learn more:\n\n* [[Transclusion in WikiText]]\n* [[Transclusion Basic Usage]]\n* [[Transclusion with Templates]]\n* [[Transclusion and Substitution]]\n* TextReference\n* TemplateTiddlers\n* TranscludeWidget\n"},{"title":"Variables","created":"20141002133113496","modified":"20230422150445336","tags":"Concepts Reference WikiText","type":"text/vnd.tiddlywiki","text":"!! Introduction\n\nA <<.def variable>> is a snippet of text that can be accessed by name. The text is referred to as the variable's <<.def value>>.\n\nVariables are defined by [[widgets|Widgets]]. Several core widgets define variables, the most common being the <<.wlink SetWidget>>, <<.wlink LetWidget>> and <<.wlink ListWidget>> widgets.\n\nThe values of variables are available to descendant widgets, including transcluded content. For example, within each tiddler in the main story river the variable \"currentTiddler\" is set to the title of the tiddler.\n\nVariables can also be overwritten by descendent widgets defining variables of the same name, thus binding a different snippet to that name for the scope of the children of the widget.\n\n!! Special Kinds of Variables\n\nThere are several special kinds of variable that extend their basic capabilities:\n\n* [[Procedures]] are snippets of text that can be passed parameters when wikified\n* [[Functions]] are snippets of text containing [[filters|Filters]] with optional named parameters\n* [[Custom Widgets]] are snippets of text containing definitions of custom [[widget|Widgets]]\n* [[Macros]] are snippets of text that can contain placeholders that are filled in with parameters whenever the macro is used\n\nNote that these special kinds of variable can only be created with the associated shortcut definition syntax.\n\nFor a more detailed comparison of these special kinds of variables, see [[Variable Usage]].\n\n!! Defining Variables\n\nThe following core widgets are commonly used to define variables:\n\n* <<.wlink LetWidget>> widget -- the easiest way to define multiple variables\n* <<.wlink SetWidget>> widget -- the most flexible way to define a single variable\n* <<.wlink ParametersWidget>> widget -- used to declare parameter variables within [[procedures|Procedures]] and [[custom widgets|Custom Widgets]]\n* <<.wlink ListWidget>> widget -- defines a loop variable and optional counter variable\n* <<.wlink SetMultipleVariablesWidget>> widget -- allows creation of multiple variables at once where the names and values are not known in advance\n\n!! Using Variables\n\nOnce a variable is defined there are several ways to access it.\n\n!!! Transcluding Variables\n\nTranscluding a variable renders the text contents of the variable as if it replaced the call. It is a shortcut syntax for the <<.wlink TranscludeWidget>> widget with the `$variable` attribute.\n\n```\n<<varname>>\n```\n\nParameters can be passed to the transclusion as follows:\n\n```\n<<varname \"This is a parameter\">>\n<<varname param:\"This is a parameter\">>\n<<varname param:\"This is a parameter\" second:\"Another parameter\">>\n```\n\nThe handling of these parameters depends on the kind of variable:\n\n* [[Procedures]] assign the parameters to variables that are available within the procedure\n* [[Macros]] replace the text of the special markers `$param$` with the values passed to the macro for those parameters (see [[Macro Parameter Handling]] for the details)\n\nThe parameters are ignored for other kinds of variable.\n\n!!! Macro Variable Substitutions\n\nBefore the text of a macro is used, the special markers `$(variable)$` are replaced with the values of the named variable.\n\n!!! Variable Attributes\n\nVariables can be used as the value of attributes of widgets or HTML elements:\n\n```\n<div class=<<varname>>>\n```\n\nParameters can be passed:\n\n```\n<div class=<<varname \"This is a parameter\">>>\n...\n<div class=<<varname param:\"This is a parameter\">>>\n...\n<div class=<<varname param:\"This is a parameter\" second:\"Another parameter\">>>\n...\n```\n\nThe handling of these parameters depends on the kind of variable:\n\n* [[Functions]] assign the parameters to variables that are available within the function\n* [[Macros]] replace the text of the special markers `$param$` with the values passed to the macro for those parameters (see [[Macro Parameter Handling]] for the details)\n\nThe parameters are ignored for other kinds of variable.\n\n!!! Variables in Filters\n\nVariables can be accessed within [[Filters]] using angle brackets to quote the name:\n\n```\n[<varname>]\n```\n\nParameters can be passed in the usual way:\n\n```\n[<varname \"This is a parameter\">]\n[<varname param:\"This is a parameter\">]\n[<varname param:\"This is a parameter\" second:\"Another parameter\">]\n...\n```\n\n!! See Also\n\n* The <<.mlink dumpvariables>> macro lists all variables that are available at that position in the widget tree\n* Complete listing of ~TiddlyWiki's built-in [[Core Variables]]\n\n!! Examples\n\n!!! Example of Defining a Variable\n\n<$macrocall $name=\".example\" n=\"1\"\neg=\"\"\"<$set name=animal value=zebra>\n<<animal>>\n</$set>\"\"\"/>\n\n!!! Example of Defining a Macro\n\nThe `\\define` pragma below [[defines a macro|Macro Definitions]] called <<.var tags-of-current-tiddler>>. The macro returns the value of the tiddler's <<.field tags>> field, and can be accessed from anywhere else in the same tiddler (or in any tiddler that [[imports|ImportVariablesWidget]] it).\n\n<$importvariables filter=\"$:/editions/tw5.com/macro-examples/tags-of-current-tiddler\">\n<$codeblock code={{$:/editions/tw5.com/macro-examples/tags-of-current-tiddler}}/>\n<$macrocall $name=\".example\" n=\"2\" eg=\"\"\"The tags are: <<tags-of-current-tiddler>>\"\"\"/>\n</$importvariables>\n\n!!! Example of Using a Variable as a Filter Parameter\n\nThis example uses the <<.olink backlinks>> [[operator|Filter Operators]] to list all tiddlers that link to this one.\n\n<$macrocall $name=\".example\" n=\"3\" eg=\"\"\"<<list-links filter:\"[<currentTiddler>backlinks[]]\">>\"\"\"/>\n\n"},{"title":"Widgets","created":"20140908130500000","modified":"20150219182745000","tags":"Concepts Reference","type":"text/vnd.tiddlywiki","text":"~TiddlyWiki's display is driven by an underlying collection of <<.def widgets>>. These are organised into a tree structure: each widget has a parent widget and zero or more child widgets.\n\n~TiddlyWiki generates this <<.def \"widget tree\">> by parsing the WikiText of tiddlers. Each component of the WikiText syntax, including even the trivial case of ordinary text, generates a corresponding widget. The widget tree is an intermediate representation that is subsequently rendered into the actual display.\n\nWidgets are analogous to elements in an HTML document. Indeed, HTML tags in WikiText generate dedicated <<.def \"element widgets\">>.\n\nEach class of widget contributes a specific ability to the overall functionality, such as the ability to <<.wlink2 \"display an image\" ImageWidget>> or <<.wlink2 \"a button\" ButtonWidget>>, to <<.wlink2 \"call a macro\" MacroCallWidget>> or <<.wlink2 \"transclude text from elsewhere\" TranscludeWidget>>, or to [[mark a piece of text as a heading|HTML in WikiText]].\n\nThe more specialised widgets use a general-purpose [[widget syntax|Widgets in WikiText]] as their only possible WikiText representation.\n\nThe following classes of widget are built into the core:\n\n<<list-links \"[tag[Widgets]]\">>\n"},{"title":"Wiki","tags":"Concepts","text":"Groups of uniquely titled tiddlers are contained in WikiStore objects.\n\nThe WikiStore also manages the plugin modules used for widgets, and operations like serialising, deserialising, parsing and rendering tiddlers.\n"},{"title":"WikiText","created":"20131205155227468","modified":"20230303214711802","tags":"Concepts Reference","type":"text/vnd.tiddlywiki","text":"~WikiText is a concise, expressive way of typing a wide range of text formatting, hypertext and interactive features. It allows you to focus on writing without a complex user interface getting in the way. It is designed to be familiar for users of [[Markdown]] but with more of a focus on linking and the interactive features.\n\n~WikiText can also be inserted to the text field using the [[Editor toolbar]] buttons.\n\nSee [[Formatting in WikiText]] and [[Formatting text in TiddlyWiki]] for an introduction to ~WikiText.\n\nThe following elements of ~WikiText syntax are built into the core:\n\n<<list-links filter:\"[tag[WikiText]]\" class:\"multi-columns\">>\n"},{"title":"Coordinate Systems","created":"20220810201659784","modified":"20220810201659784","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"TiddlyWiki (primarily the RevealWidget) supports two coordinate systems for positioning popups (see PopupMechanism to learn more about popups).\n\n<<.from-version \"5.2.4\">> We introduced absolute coordinates that may not work with all extensions and plugins. For maximum backwards compatibility, use absolute coordinates only where necessary.\n\n!! Relative coordinate system\n\nThe default coordinate system is relative to the nearest positioned ancestor element. This is either:\n\n* an element with a non-static position, or\n* a ''td'', ''th'', ''table'' in case the element itself is static positioned.\n\nFor tiddlers the nearest positioned ancestor element mostly is the body of the tiddler. Read the next chapter to learn about the exceptions.\n\nRelative coordinates are expressed in the form ''(x,y,w,h)''. Where ''x'' and ''y'' represent the position and ''w'' and ''h'' the width and height of the element.\n\n!! Absolute coordinate system\n\nThe relative coordinate system works flawless most of the time. Problems occure if the target element (for example, a popup) and the source element (the triggering button) do not share the same positioned ancestor element. This is often the case if the popup is declared outside a table and the triggering button is declared within a table cell. In this case the coordinate systems have different origins and the popup will be displayed in the wrong location.\n\nAbsolute coordinates can fix this problem by using the root element of the page (the upper-left corner of the page) as the origin of the coordinate system. Absolute coordinates are expressed in the form ''@(x,y,w,h)''. Where ''x'' and ''y'' represent the position and ''w'' and ''h'' the width and height of the element. The leading ''@''-symbol marks these coordinates as absolute.\n\nThe ButtonWidget has an option (''popupAbsCoords'') to put absolute coordinates into the state tiddler. The DraggableWidget and the EventCatcherWidget provide the absolute coordinate of an event within the attribute `tv-popup-abs-coords`.\n\n\n!! Example\n\nThe following example shows a popup that is triggered from within a table cell. The table cell is the nearest positioned ancestor element. The popup was defined outside the table cell. The button using relative coordinates will open the popup in the wrong location because the button and the popup do not agree on the same coordinate system. Using absolute coordinates fixes this problem.\n\n<<wikitext-example-without-html '<$reveal type=\"popup\" state=\"$:/state/CoordinateSampleReveal\">\n<div class=\"tc-drop-down\">\nPopup\n</div>\n</$reveal>\n\n| Table Row 1 |<$button popup=\"$:/state/CoordinateSampleReveal\">Relative coordinates</$button>|\n| Table Row 2 |<$button popup=\"$:/state/CoordinateSampleReveal\" popupAbsCoords=\"yes\">Absolute coordinates</$button>|'>>\n"},{"title":"Custom Widgets","created":"20221007144237585","modified":"20230921180332436","tags":"Concepts Reference","type":"text/vnd.tiddlywiki","text":"!! Introduction\n\n<<.from-version \"5.3.0\">> A <<.def \"custom widget\">> is a special kind of [[procedure|Procedures]] that can be called using the same syntax as widgets.\n\nCustom widgets can also be used to override built-in JavaScript widgets to customise their behaviour. \n\n!! Defining Custom Widgets\n\nCustom widgets are usually defined with the [[Pragma: \\widget]]:\n\n```\n\\widget $my.widget(attribute:\"Default value\")\nThis is the widget, and the attribute is <<attribute>>.\n\\end\n```\n\nThe name of the widget must start with a dollar sign. If it is a user defined widget that does not override an existing widget then it must include at least one period (dot) within the name (for example `$my.widget` or `$acme.logger`).\n\nNote that the [[Pragma: \\whitespace]] setting is inherited from the parsing context in which the procedure definition occurs. That means that a tiddler containing multiple procedure definitions only needs a single whitespace pragma at the top of the tiddler, and the setting will be automatically inherited by the procedure definitions without needing the pragma to be repeated.\n\n!! Using Custom Widgets\n\nCustom widgets are called in the same way as ordinary built-in widgets:\n\n```\n<$my.widget/>\n\n<$my.widget attribute=\"The parameter\"/>\n```\n\nThe attributes that are specified in the widget call are made available as parameter variables.\n\n!! Accessing Content of Custom Widgets\n\nWithin the definition of a custom widget the content of the calling widget is available via the `<$slot $name=\"ts-raw\"/>` widget. The contents of the <<.wlink SlotWidget>> widget is used as the default content if the widget was called without any content.\n\nFor example:\n\n<<wikitext-example-without-html \"\"\"\\widget $my.widget(one:'Jaguar')\n<$text text=<<one>>/>\n<$slot $name=\"ts-raw\">\n\tWhale\n</$slot>\n\\end\n\n<$my.widget one=\"Dingo\">\n\tCrocodile\n</$my.widget>\n\n<$my.widget/>\"\"\">>\n\n!! How Custom Widgets Work\n\nCustom widgets are implemented as a special kind of [[variable|Variables]]. The only thing that distinguishes them from ordinary variables is the way that they can be called as a custom widget with attributes mapped to parameters.\n\n!! Overriding Core ~JavaScript Widgets\n\nCustom widgets can use the <<.wlink \"GenesisWidget\">> widget to invoke the original widget, bypassing the override. For example, here we override the <<.wlink CodeBlockWidget>> widget to add `≤≥` symbols around each string of text.\n\n\n<<wikitext-example-without-html \"\"\"\\widget $codeblock(code)\n<$genesis $type=\"$codeblock\" $remappable=\"no\" code={{{ [<code>addprefix[≤]addsuffix[≥]] }}}/>\n\\end\n\n<$codeblock code=\"Kangaroo\"/>\n\n<$codeblock code={{$:/SiteTitle}}/>\n\n```\nPython\n```\n\n<$let test=\"Tiger\">\n<$codeblock code=<<test>>/>\n</$let>\"\"\">>\n"},{"title":"Customizing EditTemplate field rendering","created":"20220305183700000","modified":"20220413165500000","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"When editing a tiddler the [[EditTemplate|$:/core/ui/EditTemplate/fields]] normally renders fields as simple input boxes. To modify this behaviour, the [[cascade mechanism|Cascades]] can be used. Via the [[Field Editor Cascade|Field Editor Cascade]] the name of the tiddler used for rendering the field editor can be specified. The content of this tiddler is transcluded to represent the content of the field.\n\nTo modify the appearance of all fields whose name ends with `-date` create a new tiddler and add the `$:/tags/FieldEditorFilter` tag to it. Add a `list-before` field and assign the value `$:/config/FieldEditorFilters/default`. Now you have to put the filter for the cascade into the tiddler's text field: `[suffix[-date]then[$:/config/EditTemplateFields/Templates/dates]]`. This will transclude the tiddler named `$:/config/EditTemplateFields/Templates/dates` to render the input elements for all fields with names matching the regular expression.\n\nThe variables `currentTiddler`, `currentField` and `currentFieldName` are set to pass information about the tiddler and field that are edited to the transcluded tiddler.\n\n|`currentTiddler`|The tiddler that must be used to store the field value.|\n|`currentField`|The field within the `currentTiddler` that must be used to store the field name. This is an opaque value hat may contain any field name (even `text`), use `currentFieldName` to make decisions based on the actual name of the currently edited field.|\n|`currentFieldName`|The name of the currently edited field.|\n\nFor example, a tiddler containing the following WikiText would render the field as an HTML input element of the type `date`. This will show a date picker for the fields on all modern browsers:\n\n```\n<$edit-text tiddler=<<currentTiddler>> field=<<currentField>> tag=\"input\" type=\"date\" class=\"tc-edit-texteditor tc-edit-fieldeditor\" placeholder=\"Set your date\" tabindex={{$:/config/EditTabIndex}} cancelPopups=\"yes\"/>\n```\n\n<<.warning \"The `currentField` variable will be set to `text` for new fields. Make sure that your editor will handle this correctly. For example, by setting the `tag` attribute on the EditTextWidget. If you want to know the name of the currently edited/added field, use the `currentFieldName` variable.\">>\n\nThe `tabindex` and `cancelPopups` attributes make sure the HTML input element behaves exactly the default elements provided by TiddlyWiki.\n\nNot only the EditTextWidget can be used. A tiddler containing the following WikiText will render the field as a drop-down-list that allows the user to select the name of a tiddler. The name of the selected tiddler will be stored in the field.\n\n```\n<$select tiddler=<<currentTiddler>> field=<<currentField>> class=\"tc-edit-texteditor tc-edit-fieldeditor\" cancelPopups=\"yes\">\n    <$list filter='[all[tiddlers]sort[title]]'>\n        <option value=<<currentTiddler>>><$view field='title'/></option>\n    </$list>\n</$select>\n```\n\nThe classes `tc-edit-texteditor` and `tc-edit-fieldeditor` should be used to style the `input` and `select` elements to match the theme of the TiddlyWiki installation.\n\n! Persistence of values when creating fields\n\nWhen using multiple field editors for creating fields within the [[EditTemplate|$:/core/ui/EditTemplate/fields]], every field editor tiddler returned by the [[Field Editor Cascade|Field Editor Cascade]] gets its own storage tiddler. This is done to prevent problems with incompatible values when the user is switching between fields governed by different field editors.\n\n!! Example\n\nThere is a cascade that returns a special field editor for all fields starting with the string \"my-\". All other fields use the default field editor.\nIf you type a new value into the \"field value\" input box and select any field not starting with \"my-\", the value will be kept.\nIf you switch to a field, that starts with \"my-\", the \"field value\" input field will be empty again because a new type of field editor is used. If you now type a value and switch to another field starting with \"my-\" the value will be kept. If you switch to a field that does not start with \"my-\" the previously typed value (that was stored for the default editor) will reappear."},{"title":"Functions","created":"20221009124003601","modified":"20230419103154328","tags":"Concepts Reference","type":"text/vnd.tiddlywiki","text":"!! Introduction\n\n<<.from-version \"5.3.0\">> A <<.def function>> is a named snippet of text containing a [[Filter Expression]]. Functions can have named parameters which are available within the function as variables.\n\nFunctions are usually defined with the [[Pragma: \\function]]:\n\n```\n\\function my-function(parameter:\"2\")\n[<parameter>multiply[1.5]]\n\\end\n```\n\nFunctions can be invoked in several ways:\n\n* Directly transclude functions with the syntax `<<myfn param:\"value\">>`\n* Assign functions to widget attributes with the syntax `<div class=<<myfn param:\"value\">>>`\n* Invoke functions via the [[function Operator]] with the syntax `[function[myfn],[value],...]`\n* Directly invoke functions whose names contain a period as custom filter operators with the syntax `[my.fn[value]]` or `[.myfn[value]]`\n\n!! How Functions Work\n\nFunctions are implemented as a special kind of [[variable|Variables]]. The only thing that distinguishes them from ordinary variables is the way that the parameters are handled.\n"},{"title":"Pragmas","created":"20220917112416666","modified":"20230721064409436","tags":"Concepts [[WikiText Parser Modes]]","type":"text/vnd.tiddlywiki","text":"A <<.def pragma>> is a special component of WikiText that provides control over the way the remaining text is parsed.\n\nPragmas occupy lines that start with `\\`. They can only appear at the start of the text of a tiddler, but blank lines and comments are allowed between them. If a pragma appears in the main body of the text, it is treated as if it was ordinary text.\n\n<<.from-version \"5.2.6\">> Pragmas can have preceding optional whitespace characters.\n\nThe following pragmas are available:\n\n<<list-links \"[tag[Pragmas]]\">>\n"},{"title":"Procedures","created":"20221007124007426","modified":"20230419103154329","tags":"Concepts Reference","type":"text/vnd.tiddlywiki","text":"!! Introduction\n\n<<.from-version \"5.3.0\">> A <<.def procedure>> is a named snippet of text. They are typically defined with the [[Pragma: \\procedure]]:\n\n```\n\\procedure my-procedure(parameter:\"Default value\")\nThis is the procedure, and the parameter is <<parameter>>.\n\\end\n```\n\nThe name wrapped in double angled [[brackets|Brackets]] is used a shorthand way of [[transcluding|Transclusion]] the snippet. Each of these <<.def \"procedure calls\">> can supply a different set of parameters:\n\n```\n<<my-procedure>>\n<<my-procedure \"The parameter\">>\n```\n\nThe parameters that are specified in the procedure call are made available as variables.\n\n!! How Procedures Work\n\nProcedures are implemented as a special kind of [[variable|Variables]]. The only thing that distinguishes them from ordinary variables is the way that the parameters are handled.\n\n!! Using Procedures\n\n* [[Procedure Definitions]] describes how to create procedures\n* [[Procedure Calls]] describes how to use procedures\n* [[Procedure Parameter Handling]] describes how procedure parameters work\n\n"},{"title":"Story Tiddler Template","created":"20211204122044198","modified":"20211206133756716","tags":"Concepts","type":"text/vnd.tiddlywiki","text":"\"Story tiddler template\" refers to the template used to display a tiddler within the story river.\n\nThe core story tiddler template can be found in $:/core/ui/StoryTiddlerTemplate\n\nThe [[Story Tiddler Template Cascade]] is used to choose the template to be used for a particular tiddler. By default, the edit template is used for tiddlers in draft mode, and the view template used otherwise.\n\nSee also:\n\n<<list-links \"[tag[Story Tiddler Template]]\">>\n"},{"title":"Concepts","color":"#FF8383","created":"20130825144700000","list":"Cascades ColourPalettes Commands [[Current Tiddler]] DataTiddlers [[Date Fields]] DefaultTiddlers DictionaryTiddlers ExternalImages Filters [[Hard and Soft Links]] JSONTiddlers [[Keyboard Shortcut Tiddler]] Macros Messages Modules PermaLinks Plugins Pragma [[Railroad Diagrams]] ShadowTiddlers [[Story River]] SystemTags SystemTiddlers Tagging TemplateTiddlers TextReference TiddlerFields TiddlerLinks Tiddlers TiddlyWiki TiddlyWiki5 [[Title List]] [[Title Selection]] Transclusion Variables Widgets Wiki WikiText","modified":"20211201100624625","tags":"Reference","type":"text/vnd.tiddlywiki","text":"These are the concepts underlying TiddlyWiki. Understanding how these ideas fit together is the key to getting the most from TiddlyWiki.\n\n<<list-links \"[tag[Concepts]]\">>\n"}]